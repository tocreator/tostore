---
description: 
globs: 
alwaysApply: false
---
# 查询系统指南

ToStore提供了强大的查询系统，支持链式操作、SQL和Map风格查询，主要组件包括：

## 查询构建

- [query_builder.dart](mdc:lib/src/query/query_builder.dart) - 查询构建器，支持链式操作
- [query_condition.dart](mdc:lib/src/query/query_condition.dart) - 查询条件定义

## 查询执行

- [query_executor.dart](mdc:lib/src/query/query_executor.dart) - 查询执行器，负责执行查询
- [query_plan.dart](mdc:lib/src/query/query_plan.dart) - 查询计划，定义查询的执行策略

## 性能优化

- [query_optimizer.dart](mdc:lib/src/query/query_optimizer.dart) - 查询优化器，优化查询性能
- [cost_estimator.dart](mdc:lib/src/query/cost_estimator.dart) - 成本估算器，评估查询成本
- [query_cache.dart](mdc:lib/src/query/query_cache.dart) - 查询缓存，缓存频繁查询

## 链式操作

- [chain_builder.dart](mdc:lib/src/Interface/chain_builder.dart) - 链式构建器接口
- [update_builder.dart](mdc:lib/src/chain/update_builder.dart) - 更新构建器
- [delete_builder.dart](mdc:lib/src/chain/delete_builder.dart) - 删除构建器
- [upsert_builder.dart](mdc:lib/src/chain/upsert_builder.dart) - 更新插入构建器
- [schema_builder.dart](mdc:lib/src/chain/schema_builder.dart) - 模式构建器

## 查询示例

```dart
// 基本查询
final result = await db.query('users')
                      .where('age', '>', 18)
                      .and()
                      .where('status', '=', 'active')
                      .orderBy('name')
                      .limit(10);

// 复杂查询
final result = await db.query('users')
                      .where('age', '>', 18)
                      .or()
                      .join('orders', 'users.id', 'orders.user_id')
                      .select(['users.*', 'orders.total']);
```

